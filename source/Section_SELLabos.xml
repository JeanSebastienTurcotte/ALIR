<?xml version="1.0" encoding="UTF-8"?>

<!-- Ce fichier constitue une section du livre                              -->
<!--                                                                        -->
<!--      Algèbre linéaire : Intuition et rigueur                           -->
<!--                                                                        -->
<!-- Creative Commons Attribution Share Alike 4.0 International             -->
<!-- CC-BY-4.0                                                              -->
<!-- Jean-Sébastien Turcotte, Philémon Turcotte                             -->

<!-- Les sections sont divisées en quatre parties, en plus du titre. Les parties introduction et conclusion sont facultatives. Le texte de ceux-ci apparait respectivement avant et après les sections. Les exercices sont à la fin de la section -->

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-SELlabos">   <!-- Ajouter l'identifiant de la section après le - du xml:id -->
    <title> Activités et laboratoires </title>
    <introduction xml:id= "intro-SELlabos">  <!-- Ajouter le même identifiant de la section après le - du xml:id -->
    <p>Dans cette section, on regarde différentes activités et laboratoires en lien avec des concepts du chapitre.</p>
    </introduction>
    <project>
    <title>Des matrices, magiques</title>
    <introduction>
    <p>On considère la matrice 
    <me>
    M=\begin{pmatrix} 4&amp; 9&amp; 2\\
                      3&amp; 5&amp; 7\\
                      8&amp; 1&amp; 6\end{pmatrix}
    </me>. Dans cette matrice, on peut remarquer que la somme de chaque ligne et de chaque colonne vaut <m>15</m>. De plus, la somme des deux diagonales vaut aussi <m>15</m>. La matrice <m>M</m> est un exemple de ce qu'on
    appelle un carré magique. Dans la matrice <m>M</m>, on constate que les neuf entrées sont exactement les valeurs <m>1,2,\ldots , 9</m>, mais ce n'est pas nécessaire. Un tel exemple sera dit carré magique classique.</p>
    <definition>
    <title>Carré semi-magique et magique</title>
    <statement><p>Soit <m>M</m> une matrice <m>n\times n</m>. Si toutes les lignes et toutes les colonnes de la matrice somment à la même valeur, on dit que <m>M</m> est semi-magique.
    Si en plus les deux diagonales somment à cette même valeur, on dit alors que <m>M</m> est magique.</p></statement>
    </definition>
    <p>Dans cette activité, on s'intéresse à la construction de carrés magiques et certaines généralisations.</p>
    </introduction>
    <task>
    <title>Le cas <m>3\times 3</m> </title>
    <introduction>
    <p>On débute avec une méthode qui permettra d'obtenir la matrice <m>M</m> de l'introduction. On pourra ensuite généraliser les idées pour construire d'autres carrés magiques. On considère une matrice quelconque de taille <m>3\times 3</m>
    <me>
    M=\begin{pmatrix} a&amp; d&amp; g\\
                      b&amp; e&amp; h\\
                      c&amp; f&amp; i\end{pmatrix}
    </me>.</p>
    </introduction>
    <task><statement><p>Dans l'exemple en introduction, la somme magique est <m>15</m>. On peut écrire un système à 8 équations et 9 inconnues pour que la matrice quelconque soit magique avec somme <m>15</m>:
    <md>
    <mrow>a+d+g&amp;=15 &amp;&amp; \text{ligne 1}</mrow>
    <mrow>b+e+h&amp;=15 &amp;&amp; \text{ligne 2}</mrow>
    <mrow>c+f+i&amp;=15 &amp;&amp; \text{ligne 3}</mrow> 
    <mrow>a+b+c&amp;=15 &amp;&amp; \text{colonne 1}</mrow>
    <mrow>d+e+f&amp;=15 &amp;&amp; \text{colonne 2}</mrow>
    <mrow>g+h+i&amp;=15 &amp;&amp; \text{colonne 3}</mrow>
    <mrow>a+e+i&amp;=15 &amp;&amp; \text{diagonale principale}</mrow>
    <mrow>c+e+g&amp;=15 &amp;&amp; \text{diagonale secondaire}</mrow>
    </md>.
    Utiliser Sage pour résoudre ce système d'équations. Il devrait y avoir deux variables libres dans la forme échelonnée réduite. Quelles sont-elles et quelles doivent être les valeurs de ces variables libres pour que la solution soit égale à la 
    matrice <m>M</m> de l'introduction?</p>
    Les fonctions <c>solbase</c> et <c>solgen</c> des exemples calculatoires <xref ref="sageex-Ax0"/> et <xref ref="sageex-solstd"/>
    <sage>
    <input>
    
    </input>
    <!-- réponse -->
    <!--<output>
    #############################Fonctions intermédiaires################
def matL(A):
    R=A.rref()  #Si la matrice n'est pas ERL, on l'échelonne
    r=A.rank()  #On détermine le rang. Ceci permet de savoir combien de lignes nulles il y a.
    Rnonnulles=R.matrix_from_rows(list(range(r)))   #On ne conserve de R que les lignes non nulles. list(range(r))=[0,1,...,r]
    L=Rnonnulles.matrix_from_columns(R.nonpivots()) #De la matrice Rnonnulles, on extrait les colonnes non pivots pour former L
    return(L)  #On renvoie la matrice L comme réponse
def solbase(A):
    if A.rank()==A.ncols(): #Si toutes les variables sont pivots
        return "Il n'y a pas de solution de base. La seule solution à Ax=0 est le vecteur nul"
    else:
        R=A.rref() #On réduit la matrice A
        r=R.rank() #Le rang de la matrice R
        piv=R.pivots() #La position des pivots de R
        libres=R.nonpivots() #la position des variables libres
        L=matL(A) #On va chercher la matrice L
        Ilibre=identity_matrix(len(libres)) #La matrice identité de la taille du nombre de variables libres
        S=[] #Une liste vide qui contiendra les vecteurs s_i
        for i in range(len(libres)): #On va créer successivement les len(libres) vecteurs de base
            vL=L.column(i) #On extrait la colonne i de la matrice L
            vI=Ilibre.column(i) #On extrait la colonne i de la matrice Ilibre
            #On veut maintenant placer les valeurs de vL et vI dans un vecteur s_i. Il est plus simple d'utiliser les listes Sage et de convertir en vecteur par la suite. La taille 
            #d'un vecteur s_i est n
            s=[] #une liste vide qui sera le vecteur s_i au terme de la boucle suivante
            k,l=0,0 #Pour itérer sur les la colonne vL et vI
            for j in range(A.ncols()): #la longueur du vecteur s_i est la même que le nombre de colonnes de A
                if j in piv: #Si on est dans une entrée pivot
                    s.append(-vL[k])# On ajoute l'entrée, en pensant de prendre le négatif
                    k+=1 #on itère pour passer à l'entrée suivante
                else: #Si j est une entrée libre
                    s.append(vI[l])# On ajoute l'entrée
                    l+=1 #on itère pour passer à l'entrée suivante
            s=vector(s) #on transforme la liste s en vecteur
            S.append(s) # et on l'ajoute à la liste des solutions de base
        return(S)
def solgen(A,b):
    Aaug=A.augment(b) #On augment la matrice avec le vecteur b
    Raug=Aaug.rref()
    if  A.rank()!=Aaug.rank(): #On vérifie si le système est compatible
        return "Il n'y a pas de solution au système."
    else:
        sbase=solbase(A) #On va chercher les solutions de base
        piv=A.pivots() #La position des pivots
        xp=[]
        ligne=0 #Sert à garder la ligne où on est rendu
        for i in range(A.ncols()):  #le vecteur xp a ncols() composantes
            if i in piv:
                xp.append(Raug[ligne][-1]) #L'entrée de xp est dans la matrice augmentée rref(), ligne i dernière colonne
                ligne+=1 #On change de ligne
            else: #Si i n'est pas pivot, l'entrée vaut 0
                xp.append(0)
        xp=vector(xp)
        return("Solutions de base:",sbase,"Solution particulière:",xp)
####################################################################
S=vector([15]*8) #Un vecteur de taille 8 contenant juste la valeur 15
A=matrix([[1,0,0,1,0,0,1,0,0],[0,1,0,0,1,0,0,1,0],[0,0,1,0,0,1,0,0,1],[1,1,1,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1],[1,0,0,0,1,0,0,0,1],[0,0,1,0,1,0,1,0,0]])
Aaug=A.augment(S,subdivide=True)
show("La matrice A augmentée:",Aaug)
show("La forme échelonnée réduite:",Aaug.rref())
show(solgen(A,S))
s1=solgen(A,S)[1][0]
s2=solgen(A,S)[1][1]
xp=solgen(A,S)[3]
show("Les variables libres sont les entrées h,i de la matrice. Pour avoir la matrice M de l'introduction, il faut qu'elle soit égale à 7 et 6 respectivement")
show("(a,b,c,d,e,f,g,h,i)=",7*s1+6*s2+xp)
show("Sous forme de matrice:")
show(column_matrix(3,3,7*s1+6*s2+xp))
    </output> -->
    </sage>
    </statement></task>
    <task><p>Déterminer le carré magique <m>3\times 3</m> où votre date de fête, sous le format (jj/mm) apparait aux variables libres, toujours avec une somme de <m>15</m>.</p>
    <sage>
    <input>
    
    </input>
    </sage></task>
    <task xml:id="tsk-hypcom"><p>Donner d'autres exemples de carrés magiques <m>3\times 3</m> dont la somme vaut <m>15</m>, en changeant la valeur des variables libres. Qu'y a-t-il de commun entre chacun des carrés magiques?</p>
    <sage>
    <input>
    
    </input>
    </sage></task>
    <task><p>Donner le carré magique dont la somme vaut est égal au trois derniers chiffres de votre numéro de DA, toujours avec les variables libres égales à votre date de fête.</p></task>
    <task><p>Vérifier à nouveau l'hypothèse de la partie <xref ref="tsk-hypcom"/> pour les carrés magiques de somme le numéro de DA.</p></task>
    </task>
    <task>
    <introduction><p>Considérer les généralisations suivantes et déterminer un carré magique qui satisfait <alert>l'une</alert> de celles-ci. Donner le nombre de variables libres obtenus lors de la résolution.</p></introduction>
    <task><p>Un carré magique <m>4\times 4</m> avec comme contraintes additionnelles que les quatres sous-carrés donnent aussi la somme magique.</p>
    <figure>
    <image source="code/LaTeX/fig-carremagique4x4-1.svg">
    <caption>Conditions additionelles dans les sous-matrices</caption>
    </image>
    </figure>
    </task>
    <task><p>Un carré magique <m>4\times 4</m> avec comme contraintes additionnelles que le carré centrale,les quatre coins et les nombres restant sur les côtés donnent aussi la somme magique.</p>
    <figure>
    <image source="code/LaTeX/fig-carremagique4x4-2.svg">
    <caption>Conditions additionelles dans les sous-matrices</caption>
    </image>
    </figure>
    </task>
    <task><p>Un carré magique <m>5\times 5</m> avec huit autres contraintes de votre choix. Bien identifier les contraintes.</p></task>
    </task>
    </project>
</section>
