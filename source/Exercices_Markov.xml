<?xml version="1.0" encoding="UTF-8"?>

<!-- Ce fichier constitue un fichier auxiliaire du livre                     -->
<!--                                                                        -->
<!--      Algèbre linéaire : Intuition et rigueur                           -->
<!--                                                                        -->
<!-- Creative Commons Attribution Share Alike 4.0 International             -->
<!-- CC-BY-4.0                                                              -->
<!-- Jean-Sébastien Turcotte, Philémon Turcotte                             -->

<exercises xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="exo-Markov">   <!-- Ajouter l'identifiant de la section après le - du xml:id -->
    <title> Exercices </title>
    <!-- 
   <exercise xml:id="exo-nom">
    <introduction>
    <p>L'énoncé de l'exercice.</p>
    </introduction>
    <task>
            <statement>
                <p>La première lettre de la question.</p>
            </statement>
            <answer>
                <p> La réponse suivra. </p>
            </answer>
            <solution>
                <p> La solution suivra. </p>
            </solution>
    </task>
    </exercise>
    -->
    <exercise><introduction><p>Considérer une chaine de Markov dont la matrice de transition est donnée par
<me>
T=\begin{pmatrix}
0.4&amp;0.1\\
0.6&amp;0.9
\end{pmatrix}
</me>.</p></introduction>
<task><statement><p> Si l'état initial <m>X_0</m> est donné par le vecteur <m>(0.2,\,0.8)</m>, déterminer l'état après <m>4</m> transitions.</p></statement>
<answer><p><m>\begin{pmatrix}
0.14332\\
0.85668
\end{pmatrix}</m></p></answer>
<solution><p>Il suffit de calculer 
<md>
<mrow>T^4X_0&amp;=\begin{pmatrix}
0.4&amp;0.1\\
0.6&amp;0.9
\end{pmatrix}^4
\begin{pmatrix}
0.2\\
0.8
\end{pmatrix}</mrow>
<mrow>&amp;=\begin{pmatrix}
0.4&amp;0.1\\
0.6&amp;0.9
\end{pmatrix}^2
\begin{pmatrix}
0.4&amp;0.1\\
0.6&amp;0.9
\end{pmatrix}^2
\begin{pmatrix}
0.2\\
0.8
\end{pmatrix}</mrow>
<mrow>&amp;=\begin{pmatrix}
0.22&amp;0.13\\
0.78&amp;0.87
\end{pmatrix}
\begin{pmatrix}
0.22&amp;0.13\\
0.78&amp;0.87
\end{pmatrix}
\begin{pmatrix}
0.2\\
0.8
\end{pmatrix}</mrow>
<mrow>&amp;=\begin{pmatrix}
0.1498&amp;0.1417\\
0.8502&amp;0.8583
\end{pmatrix}
\begin{pmatrix}
0.2\\
0.8
\end{pmatrix}</mrow>
<mrow>&amp;=\begin{pmatrix}
0.14332\\
0.85668
\end{pmatrix}</mrow>
</md></p></solution>
</task>
<task><statement><p> Quel sera l'état à long terme de cette chaine?</p></statement>
<answer><p><m>\begin{pmatrix}
1/7\\
6/7
\end{pmatrix}</m></p></answer>
<solution><p>On cherche un vecteur état qui sera stationnaire et donc inchangé par la matrice de transition. On pose <m>X=(x,\,1-x)</m>, cet état. Ainsi,
<me>
\begin{pmatrix}
0.4&amp;0.1\\
0.6&amp;0.9
\end{pmatrix}\begin{pmatrix}
x\\1-x
\end{pmatrix}=
\begin{pmatrix}
x\\1-x
\end{pmatrix}</me>.
On obtient les équations suivantes:
<md>
<mrow>0.4x+0.1(1-x)&amp;=x</mrow>
<mrow>0.6x+0.9(1-x)&amp;=1-x</mrow>
</md>
On résoud pour trouver <m>x=1/7</m> et donc le vecteur stable est
<me>
X=\begin{pmatrix}
x\\
1-x
\end{pmatrix}=\begin{pmatrix}
1/7\\
6/7
\end{pmatrix}</me>.</p></solution>
</task>
</exercise>
<exercise><introduction><p>On considère la chaine de Markov se déroulant sur le graphe de la figure suivante.
<figure xml:id="fig-exoMarkov1">
<caption>Le graphe de l'exercice</caption>
<image xml:id="img-exoMarkov1">
<description>
Une graphe à quatre sommet est illustré avec des arêtes reliant certains sommets.
</description>
<sageplot>
A=matrix([[0,1/3,1/3,1],[1/3,0,1/3,0],[1/3,1/3,0,0],[1/3,1/3,1/3,0]])
G=DiGraph(A)
plot(G,edge_labels=False,layout="circular")
</sageplot>
</image>
</figure>
</p></introduction>
<task>
<statement><p>Déterminer la matrice de transition associée à une chaince de Markov sur ce graphe.</p></statement>
<answer><p><m>T=\begin{pmatrix}
0&amp;1/3&amp;1/3&amp;1\\
1/3&amp;0&amp;1/3&amp;0\\
1/3&amp;1/3&amp;0&amp;0\\
1/3&amp;1/3&amp;1/3&amp;0
\end{pmatrix}</m></p></answer>
</task>
<task><statement><p>Si un objet est placé au sommet <m></m> du graphe et se déplace selon les règles, quel est l'endroit le plus probable où il peut se retrouver après deux transitions?</p></statement>
<answer><p>Sur le sommet <m>0</m>.</p></answer>
<solution><p>
Il faut calculer <m>T^2X_0</m> où <m>X_0=(1,0,0,0)</m> est le vecteur de l'état initial.
<md>
<mrow>T^2X_0&amp;=\begin{pmatrix}
0&amp;1/3&amp;1/3&amp;1\\
1/3&amp;0&amp;1/3&amp;0\\
1/3&amp;1/3&amp;0&amp;0\\
1/3&amp;1/3&amp;1/3&amp;0
\end{pmatrix}^2
\begin{pmatrix}
1\\0\\0\\0
\end{pmatrix}</mrow>
<mrow>&amp;=\begin{pmatrix}
5/9&amp;4/9&amp;4/9&amp;0\\
1/9&amp;2/9&amp;1/9&amp;1/3\\
1/9&amp;1/9&amp;2/9&amp;1/3\\
2/9&amp;2/9&amp;2/9&amp;1/3
\end{pmatrix}
\begin{pmatrix}
1\\0\\0\\0
\end{pmatrix}</mrow>
<mrow>&amp;=\begin{pmatrix}
5/9\\1/9\\1/9\\2/9
\end{pmatrix}</mrow>
</md>.
On peut donc voir que la position la plus probable après deux transitions est la position $1$.
</p></solution>
</task>
<task><statement><p>L'objet est oublié et continue ses déplacements pendant un bon moment. Une personne finit par l'apercevoir et note la position de l'objet. Quelles sont les probabilbités qu'à ce moment, l'objet se trouve sur le sommet <m>3</m>?</p></statement>
<answer><p>Environ <m>25\%</m>.</p></answer>
<solution><p>La meilleure manière de répondre à cette question est de considérer l'état stable. Puisque l'objet se déplace depuis un certain moment, le système a eu le temps de se stabiliser et ce sera la meilleure estimation. On pose <m>X=(x,y,z,1-(x+y+z))</m>, le vecteur stable recherché. Ainsi,
<me>\begin{pmatrix}
0&amp;1/3&amp;1/3&amp;1\\
1/3&amp;0&amp;1/3&amp;0\\
1/3&amp;1/3&amp;0&amp;0\\
1/3&amp;1/3&amp;1/3&amp;0
\end{pmatrix}\begin{pmatrix}
x\\y\\z\\1-x-y-z
\end{pmatrix}=
\begin{pmatrix}
x\\y\\z\\1-x-y-z
\end{pmatrix}</me>.
À partir de cette égalité vectorielle, on obtient le système d'équations linéaires
<md>
<mrow>\frac{y}{3}+\frac{z}{3}+1-x-y-z&amp;=x</mrow>
<mrow>\frac{x}{3}+\frac{z}{3}&amp;=y</mrow>
<mrow>\frac{x}{3}+\frac{y}{3}&amp;=z</mrow>
<mrow>\frac{x}{3}+\frac{y}{3}+\frac{z}{3}&amp;=1-x-y-z</mrow>
</md>.
Une fois réduit (on a multiplié par <m>3</m> pour éliminer les fractions), le système est équivalent à
<md>
<mrow>6x+2y+2z&amp;=3</mrow>
<mrow>x-3y+z&amp;=0</mrow>
<mrow>x+y-3z&amp;=0</mrow>
<mrow>4x+4y+4z&amp;=3</mrow>
</md>.
On résout avec Gauss-Jordan:
<me>\left(\begin{array}[ccc|c]
6&amp;2&amp;2&amp;3\\
1&amp;-3&amp;1&amp;0\\
1&amp;1&amp;-3&amp;0\\
4&amp;4&amp;4&amp;3
\end{array}\right)
\sim\cdots\sim
\left(\begin{array}[ccc|c]
1&amp;0&amp;0&amp;3/8\\
0&amp;1&amp;0&amp;3/16\\
0&amp;0&amp;1&amp;3/16\\
0&amp;0&amp;0&amp;0
\end{array}\right)</me>
On obtient donc <m>x=3/8</m>, <m>y=3/16</m> et <m>z=3/16</m> et ainsi,
<me>X=\begin{pmatrix}
x\\y\\z\\1-x-y-z
\end{pmatrix}=\begin{pmatrix}
3/8\\3/16\\3/16\\1/4
\end{pmatrix}</me>
On conclut donc que la position  <m>3</m> est fréquenté <m>25\%</m> du temps à l'état stable. C'est la meilleure estimation à donner pour la probabilité cherchée.</p></solution>
</task>
</exercise>
<exercise><statement><p>On s'intéresse aux chaines de Markov à deux états dont la matrice de transition est
<me>
T=\begin{pmatrix}
a&amp;b\\
1-a&amp;1-b
\end{pmatrix}
</me>
avec <m>0&lt;a,b&lt;1</m>. Déterminer l'état stationnaire d'une telle chaine.</p></statement>
<answer><p><m>\begin{pmatrix}
\frac{b}{1+b-a}\\
\frac{1-a}{1+b-a}
\end{pmatrix}</m></p></answer>
<solution><p>On cherche un vecteur de probabilité qui sera stationnaire et donc inchangé par la matrice de transition. On pose <m>X=(x,1-x)</m>, cet état. On a
<me>
\begin{pmatrix}
a&amp;b\\
1-a&amp;1-b
\end{pmatrix}\begin{pmatrix}
x\\1-x
\end{pmatrix}=
\begin{pmatrix}
x\\1-x
\end{pmatrix}</me>,
d'où on tire les équations suivantes
<md>
<mrow>ax+b(1-x)&amp;=x</mrow>
<mrow>(1-a)x+(1-b)(1-x)&amp;=1-x</mrow>
</md>.
On obtient en résolvant <m>x=\frac{b}{1+b-a}</m> et donc l'état stable est
<me>X=\begin{pmatrix}
x\\
1-x
\end{pmatrix}=\begin{pmatrix}
\frac{b}{1+b-a}\\
\frac{1-a}{1+b-a}
\end{pmatrix}.</me></p></solution>
</exercise>
<exercise xml:id="exo-etatstablesouris"><statement><p>Calculer l'état stable de la chaine de Markov représentant le déplacement de la souris dans l'exemple <xref ref="ex-sourisMarkov"/>.</p></statement>
<answer><p><m>X=(0.266666666791633, 0.399999999875033, 0.200000000077234, 0.133333333256100)</m></p></answer>
<solution>
<p>La matrice de transition est donnée par 
<me>
T=\begin{pmatrix}
0 &amp; \frac{1}{2} &amp; 0 &amp; \frac{1}{2} \\
\frac{1}{2} &amp; 0 &amp; 1 &amp; \frac{1}{2} \\
0 &amp; \frac{1}{2} &amp; 0 &amp; 0 \\
\frac{1}{2} &amp; 0 &amp; 0 &amp; 0
\end{pmatrix}
</me>. 
Un calcul montre que <m>T^2</m> n'a pas d'entrée égale à zéro et donc, il est possible de calculer une grande puissance de <m>T</m> pour trouver l'état stable. Avec Sage, on trouve <m>X=(0.266666666791633, 0.399999999875033, 0.200000000077234, 0.133333333256100)</m>.
</p>
<sage>
<input>
T=column_matrix([[0,0.5,0,0.5],[0.5,0,0.5,0],[0,1,0,0],[0.5,0.5,0,0]])
show((T^100).column(0))
</input>
<output>(0.266666666791633, 0.399999999875033, 0.200000000077234, 0.133333333256100)</output>
</sage>
</solution>
</exercise>
<exercise><introduction><p>On considère la figure <xref ref="fig-habitatsouris"/> qui représente l'habitat d'une souris.</p>
<figure xml:id="fig-habitatsouris">
<caption>Un habitat de souris.</caption>
<image source="images/souris">
<description>
Le plan d'un habitat de souris, formé de sept pièces reliées par des portes.
</description>
</image>
</figure>
</introduction>
<task>
<statement><p>Quelle est la matrice de transition associée à la chaine de Markov représentant cette situation?</p></statement>
<answer><p><m>
T=\begin{pmatrix}
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 1/2 &amp;0 &amp; 0\\
1 &amp;0&amp;0&amp;1/4&amp; 0 &amp;1 &amp; 0\\
0 &amp;1/2&amp;1/3&amp;0&amp; 1/2 &amp;0 &amp; 1\\
0 &amp;1/2&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0
\end{pmatrix}
</m></p></answer>
</task>
<task><statement><p>Sachant que la souris est présentement dans la pièce <m>5</m>, quelle sera sa position la plus probable dans trois transitions?</p></statement>
<answer><p>C'est la pièce numéro 4 qui est la plus probable.</p></answer>
<solution>
<p>On peut procéder par itération à partir du vecteur <m>X_0=(0,0,0,0,1,0,0)</m>. On a
<me>
X_1=\begin{pmatrix}
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 1/2 &amp;0 &amp; 0\\
1 &amp;0&amp;0&amp;1/4&amp; 0 &amp;1 &amp; 0\\
0 &amp;1/2&amp;1/3&amp;0&amp; 1/2 &amp;0 &amp; 1\\
0 &amp;1/2&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0
\end{pmatrix}\begin{pmatrix}0\\ 0\\ 0\\ 0\\ 1\\ 0\\ 0\end{pmatrix}=\begin{pmatrix}0\\ 1/2 \\ 0 \\ 1/2 \\ 0 \\ 0\\ 0 \end{pmatrix}
</me>,
puis
<me>
X_2=\begin{pmatrix}
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 1/2 &amp;0 &amp; 0\\
1 &amp;0&amp;0&amp;1/4&amp; 0 &amp;1 &amp; 0\\
0 &amp;1/2&amp;1/3&amp;0&amp; 1/2 &amp;0 &amp; 1\\
0 &amp;1/2&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0
\end{pmatrix}\begin{pmatrix}0\\ 1/2 \\ 0 \\ 1/2 \\ 0 \\ 0\\ 0 \end{pmatrix}=\begin{pmatrix}0 \\ 1/8 \\ 1/8 \\ 1/4 \\ 3/8 \\ 0 \\ 1/8)\end{pmatrix}
</me>
et finalement,
<me>
X_3=\begin{pmatrix}
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 1/2 &amp;0 &amp; 0\\
1 &amp;0&amp;0&amp;1/4&amp; 0 &amp;1 &amp; 0\\
0 &amp;1/2&amp;1/3&amp;0&amp; 1/2 &amp;0 &amp; 1\\
0 &amp;1/2&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;1/3&amp;0&amp; 0 &amp;0 &amp; 0\\
0 &amp;0&amp;0&amp;1/4&amp; 0 &amp;0 &amp; 0
\end{pmatrix}\begin{pmatrix}0 \\ 1/8 \\ 1/8 \\ 1/4 \\ 3/8 \\ 0 \\ 1/8)\end{pmatrix}=\begin{pmatrix}1/24 \\ 1/4 \\ 1/16 \\ 5/12 \\ 1/8 \\ 1/24 \\ 1/16 \end{pmatrix}
</me>.
</p>
</solution>
</task>
<task><statement><p>Déterminer la pièce ayant la plus grande probabilité d'abriter la souris à long terme. Est-ce que cela parait logique? Utiliser Sage pour faire les calculs.</p></statement>
<answer><p>La pièce <m>4</m>.</p></answer>
<solution>
<sage>
<input>
T=column_matrix([[0,0,1,0,0,0,0],[0,0,0,1/2,1/2,0,0],[1/3,0,0,1/3,0,1/3,0],[0,1/4,1/4,0,1/4,0,1/4],[0,1/2,0,1/2,0,0,0],[0,0,1,0,0,0,0],[0,0,0,1,0,0,0]])
(T^100).column(0).n()
</input>
</sage>
<p>C'est la pièce <m>4</m> qui a le plus de chances d'abriter la souris à long terme. Cela semble plausible étant donné que c'est la pièce qui a le plus de portes. La souris devrait donc y transiter souvent.</p>
</solution>
</task>
</exercise>
<exercise xml:id="exo-ruineparieurgen"><introduction>
<p>On reprend la situation du parieur de l'exemple <xref ref="ex-ruine"/>. Tout bon casino qui se respecte n'offre pas des probabilités équitables dans ses jeux de hasard. Pour simplifier, on considère toujours un joueur qui joue à un jeu qui ne possède que deux résultats possibles. Avec probabilité <m>p</m>, le joueur gagne <m>1</m> dollar et avec probabilité <m>1-p</m>, il perd <m>1</m> dollar.</p>
</introduction>
<task>
<statement><p>Déterminer les probabilités de chaque état après cinq tours si <m>p=0.4</m>. Comparer avec les résultats obtenus à l'exemple <xref ref="ex-ruine"/>.</p></statement>
<hint><p>Il est possible de modifier la fonction <c>ruinetransitionproba</c> de l'exemple <xref ref="ex-ruine"/> pour construire la matrice. On peut aussi la construire manuellement.</p></hint>
<answer><p><m>(0.5328, 0.1728, 0, 0.18432, 0, 0.11008)
</m></p></answer>
<solution><p>La cellule suivante offre une manière automatique de construire la matrice de transition associée à cette chaine de Markov.</p>
<sage>
<input>
def ruinetransitionproba(i,j,p,n):
    if i==0 and j==0:
        return 1
    if i==n-1 and j==n-1:
        return 1
    elif j==0:
        return 0
    elif j==n-1:
        return 0
    elif i-j==1:
        return p
    elif j-i==1:
        return 1-p
    else:
        return 0
    </input>
</sage>
<p>On calcule ensuite <m>X_5</m> avec Sage.</p>
<sage>
<input>
p=0.4
T=matrix(6,6, lambda i,j: ruinetransitionproba(i,j,p,6))
show(T)
X0=vector([0,0,1,0,0,0])
X5=T^5*X0
show(X5)
</input>
<output>(0.532800000000000, 0.172800000000000, 0.000000000000000, 0.184320000000000, 0.000000000000000, 0.110080000000000)
</output>
</sage>
<p>On constate que dans cette situation, le joueur a maintenant plus de <m>50\%</m> de chance d'être ruiné après cinq jeux, contrairement à <m>37.5\%</m> dans le jeu avec probabilité de succès égale à <m>1/2</m>.</p>
</solution>
</task>
<task><statement>Déterminer les probabilités de succès du joueur.</statement>
<solution><p>Tout comme à l'exemple <xref ref="ex-ruinestable"/>, il faut approximer <m>X</m> par <m>X_n</m> pour une grande valeur de <m>n</m> puisque l'état stable dépend de l'état initial. Avec Sage, on trouve que le joueur a maintenant moins de <m>19\%</m> de chance d'atteindre les cinq dollars avant de se ruiner, comparativment à <m>40\%</m> dans la situation équiprobable. Une changement dans la probabilité de gagner à chaque tour de <m>10\%</m> entraine un changement dans la probabilité de succès net de plus du double.</p>
<sage>
<input>
def ruinetransitionproba(i,j,p,n):
    if i==0 and j==0:
        return 1
    if i==n-1 and j==n-1:
        return 1
    elif j==0:
        return 0
    elif j==n-1:
        return 0
    elif i-j==1:
        return p
    elif j-i==1:
        return 1-p
    else:
        return 0
    </input>
</sage>
<sage>
<input>
T=matrix(6,6, lambda i,j: ruinetransitionproba(i,j,p,6))
show(T^100*vector([0,0,1,0,0,0]).n())
</input>
</sage>
</solution>
</task>
</exercise>
<exercise><introduction><p>Lors de l'envoi d'information par un système informatique, cette information est encodé dans une chaine binaire, formée de <m>0</m> ou de <m>1</m>. Il arrive parfois que lors du transfert, la chaine se corrompe. (Heureusement, il existe des techniques pour valider une chaine et déterminer si elle a été corrompu.) Chaque nombre dans une chaine est appelé un bit. On suppose qu'à chanque transfert, un bit a probabilité <m>p</m> de rester le même et probabilité <m>1-p</m> d'être changer. Les bits sont indépendants, c'est-à-dire que la fait que l'un change ou non n'affecte pas les autres.</p>
<p>On considère des chaines à deux bits d'information. Les possibilités sont <m>00, 01,10</m> et <m>11</m>. On suppose <m>p=0.99</m>.</p>
</introduction>
<task><statement><p>Puisque l'état de la chaine binaire après un transfert ne dépend que de son état avant transfert, c'est une chaine de Markov. Écrire la matrice de transition associée à la chaine.</p></statement>
<hint><p>La probabilité que deux événements indépendants surviennent est le produit des probabibités de chacun des événements. </p></hint>
<answer><p><m>\begin{pmatrix}
0.9801&amp;0.0099 &amp; 0.0099 &amp; 0.0001\\
0.0099&amp;0.9801 &amp; 0.0001 &amp; 0.0099\\
0.0099&amp;0.0001 &amp; 0.9801 &amp; 0.0099\\
0.0001&amp;0.0099 &amp; 0.0099 &amp; 0.9801
\end{pmatrix}</m></p></answer>
<solution><p>Pour toute chaine, la probabilité de demeurer inchangé est obtenu par <m>p^2=0.9801</m>. La probabilité que le premier bit change, mais pas le deuxième est <m>(1-p)p=0.0099</m>, tout comme la probabilité que le premier soit inchangé, mais que le deuxième le soit, puisque <m>p(1-p)=(1-p)p=0.0099</m>. Finalement, la probabilité que les deux bits soient changés est <m>(1-p)(1-p)=0.0001</m>. La matrice de transition est donc
<me>
T=\begin{pmatrix}
0.9801&amp;0.0099 &amp; 0.0099 &amp; 0.0001\\
0.0099&amp;0.9801 &amp; 0.0001 &amp; 0.0099\\
0.0099&amp;0.0001 &amp; 0.9801 &amp; 0.0099\\
0.0001&amp;0.0099 &amp; 0.0099 &amp; 0.9801
\end{pmatrix}
</me></p></solution>
</task>
<task><statement><p>On transmet <m>10</m> comme information. Cette chaine passe de l'ordinateur d'un utilisateur à un réseau central, est ensuite envoyé à aux serveurs d'une compagnie et finalement, se retrouve sur l'ordinateur d'une autre utilisateur. La chaine a donc subit trois transferts. Quelle est la probabilité que le message soit toujours <m>10</m> lors de la lecture par le deuxième utilisateur? (On note que le message pourrait avoir été corrompu en chemin, mais s'être corrigé tout seul.)</p></statement>
<answer><p><m>94\%</m></p></answer>
<solution><p>On pose <m>X_0=(0,0,1,0)</m> l'état initial. On cherche la troisième composante de <m>X_3</m>. Avec Sage, on trouve que cette probabilité est d'environ <m>0.94</m>, soit <m>94\%</m>.</p>
<sage>
<input>
T=column_matrix([[0.9801,0.0099,0.0099,0.0001],[0.0099,0.9801,0.0001,0.0099],[0.0099,0.0001,0.9801,0.0099],[0.0001,0.0099,0.0099,0.9801]])
X0=vector([0,0,1,0])
show((T^3*X0)[2])
</input>
<output>0.942056595216000</output>
</sage>
</solution>
</task>
<task><statement><p>Calculer <m>T^{100}</m>, comme on l'a souvent fait afin de déterminer l'état stable. Est-ce que le résultat contredit la proposition <xref ref="prop-etatstable"/>?</p></statement>
<solution>
<sage>
<input>
T=column_matrix([[0.9801,0.0099,0.0099,0.0001],[0.0099,0.9801,0.0001,0.0099],[0.0099,0.0001,0.9801,0.0099],[0.0001,0.0099,0.0099,0.9801]])
T^100
</input>
<output>
[0.320706764598805 0.245603013348568 0.245603013348568 0.188087208704053]
[0.245603013348568 0.320706764598805 0.188087208704053 0.245603013348568]
[0.245603013348568 0.188087208704053 0.320706764598806 0.245603013348569]
[0.188087208704053 0.245603013348568 0.245603013348569 0.320706764598806]
</output>
</sage>
<p>Il semble ici que l'état stable ne soit pas le même pour chacune des colonnes. Toutefois, cela ne contredit pas la proposition <xref ref="prop-etatstable"/>. Celle-ci dit que les puissances de la matrice convergent vers l'état stable. Cette convergence peut par contre être plus lente dans certain cas. Une puissance plus élevée permet de voir que la matrice converge bel et bien vers un état stable.</p>
<sage>
<input>
T=column_matrix([[0.9801,0.0099,0.0099,0.0001],[0.0099,0.9801,0.0001,0.0099],[0.0099,0.0001,0.9801,0.0099],[0.0001,0.0099,0.0099,0.9801]])
T^1000
</input>
<output>
[0.250000000841471 0.249999999999988 0.249999999999988 0.249999999158505]
[0.249999999999988 0.250000000841472 0.249999999158505 0.249999999999988]
[0.249999999999988 0.249999999158505 0.250000000841473 0.249999999999989]
[0.249999999158505 0.249999999999988 0.249999999999989 0.250000000841472]
</output>
</sage>
</solution>
</task>
</exercise>
<exercise>
<introduction><p>
Au tennis, le système de points est tel qu'un joueur doit faire quatre points pour gagner un jeu. Toutefois, il doit y avoir un écart de deux points. Une situation particulière se produit lorsque le pointage est <m>40</m><ndash/><m>40</m> (ce qui correspond à trois points pour chacun des joueurs). On entre alors dans un état appelé <lq/>égalité<rq/> (aussi appelé <lq/>deuce<rq/> en anglais). Le prochain joueur à faire un point est alors considéré en <lq/>avantage<rq/>. S'il gagne le prochain point, il remporte le jeu et s'il le perd, on retourne à égalité. On peut modéliser la partie <lq/>égalité<rq/> d'un jeu de tennis par une chaine de Markov à cinq état. On note <m>E</m> pour égalité, <m>A_s</m> pour avantage serveur, <m>A_r</m> pour avantage retourneur, <m>S</m> pour la victoire du serveur et <m>R</m> pour la victoire du retourneur. Chez les professionnels, le serveur est presque toujours considéré comme favori pour remporter le point. On suppose que pour chaque point, le serveur a probabilité <m>p</m> de remporter l'échange.
</p></introduction>
<task><statement><p>Écrire la matrice de transition modélisant un jeu à partir de l'égalité.</p></statement>
<answer>
<p><m>
T=\begin{pmatrix}
0&amp; 1-p&amp; p&amp; 0&amp; 0\\
p&amp; 0&amp; 0&amp; 0&amp; 0\\
1-p&amp;0&amp;0&amp;0&amp;0\\
0&amp; p&amp; 0&amp;1&amp;0\\
0&amp; 0&amp; 1-p&amp;0&amp;1
\end{pmatrix}
</m></p>
</answer>
</task>
<task><statement><p>Si un serveur a une probabilité de succès de <m>p=0.55</m>, quelle est la probabilité, qu'à partir de l'égalité, le jeu ne soit pas terminé après <m>5</m> échanges?</p></statement>
<answer><p><m>0.245025</m></p></answer>
<solution>
<p>Pour obtenir la probabilité que le jeu ne soit pas terminé, on doit additionner les probablités que l'on soit à égalit ou à l'un des avantages.</p>
<sage>
<input>
p=0.55
T=column_matrix([[0,p,1-p,0,0],[1-p,0,0,p,0],[p,0,0,0,1-p],[0,0,0,1,0],[0,0,0,0,1]])
X0=vector([1,0,0,0,0])
show(T^5*X0)
</input>
<output>
(0.000000000000000, 0.134763750000000, 0.110261250000000, 0.452237500000000, 0.672750000000000)
</output>
</sage>
<p>On trouve qu'il y a environ <m>24.5\%</m> de chance de que le jeu ne soit pas terminé.</p>
</solution>
</task>
<task><statement><p>Quelle est la probabilité que le serveur remporte le jeu?</p></statement>
<answer><p>Environ <m>60\%</m>.</p></answer>
<statement><p>Il faut trouver l'état stable à partir de l'état égalité. Comme la matrice possède toujours des entrées nulles, il faut procéder par le calcul d'une grande valeur de la chaine de Markov. On peut voir que le serveur a environ <m>60\%</m> de chance de remporter le jeu.</p>
<sage>
<input>
p=0.55
T=column_matrix([[0,p,1-p,0,0],[1-p,0,0,p,0],[p,0,0,0,1-p],[0,0,0,1,0],[0,0,0,0,1]])
X0=vector([1,0,0,0,0])
(T^1000*X0)[3]
</input>
<output>
0.599009900990099
</output>
</sage>
</statement>
</task>
</exercise>
<exercisegroup>
<title>Exercices Sage</title>
<introduction><p>Les exercices qui suivent sont conçus pour être résolus avec Sage. Des cellules vides sont disponibles pour écrire les réponses. Évidemment, il y a plusieurs manières d'arriver aux réponses.</p></introduction>
<exercise>
<introduction><p>Il est possible d'analyser certains jeux de société grâce aux chaines de Markov, particulièrement les jeux où peu de décision sont prises par les joueurs. Les jeux d'enfants, comme <em>serpents et échelles</em> ou <em>trouble</em>, se prêtent bien à cette analyse.</p>
<p>On propose d'étudier le jeu <em>serpents et échelles</em>, en regardant dans un premier temps une version simplifiée.</p>
<p>On considère une partie de <em>serpents et échelles</em> se déroulant sur le plateau suivant de la figure suivante.</p>
<figure xml:id="fig-serpentsechellessimple">
<caption>Une version simplifiée de serpents et échelles.</caption>
<image xml:id="img-serpentsechellessimple" source="images/serpentsechellessimple">
<description>
Un plateau de huit cases est illustré, la première identifiée D et la dernière A. Celles centrales sont identifiées de un à six. Une flèche allant de cinq à deux et une autre allant de un à quatre sont présentes.
</description>
</image>
</figure>
<p>Dans ce jeu, il y a huit cases. D'abord, on va créer un vecteur de déplacement à huit composantes qui correspondent, pour une position <m>i</m>, à la case sur laquelle on se retrouve lorsqu'on atterit sur la case <m>i</m>. Pour les besoins de la cause, on associe la case départ à la position <m>0</m> et la case d'arrivée à la position <m>7</m>.</p>
</introduction>
<task><statement><p>Créer le vecteur décrit dans l'introduction.</p>
<sage><input></input></sage>
</statement>
<answer><sage><input>
d=vector([0,4,2,3,4,5,2,7])
show(d)
</input>
<output>
(0, 4, 2, 3, 4, 2, 6, 7)
</output>
</sage></answer>
</task>
<task>
<statement xml:id="exo-serpechtour"><p>Étant donné la petite taille de ce plateau, le jeu se déroule avec une pièce de monnaie. Lorsqu'elle tombe sur <em>pile</em>, le joueur avance d'une case, et lorsqu'elle tombe sur face, le joueur avance de deux cases.</p>
<p>Créer une fonction <c>tour</c> qui, étant donnés une position de départ et le vecteur de déplacement, retourne la nouvelle position du joueur suite au lancer d'une pièce. On rapelle que la fonction <c>choice</c> peut être utilisée pour simuler du hasard.</p>
<sage><input></input></sage>
</statement>
<solution><listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
def tour(d,p): #fonction qui simule un tour de jeu, selon le vecteur de déplacement d et la position de départ p
    t=choice([1,2])
    if p==7:
        return 7
    else:
        return d[p+t]
</input>
</program>
</listing></solution></task>
<task><statement><p>Créer une fonction <c>serpech</c>, qui simule une partie de serpents et échelle sur ce plateau. La fonction prend comme argument le vecteur de déplacement et retourne le parcours du joueur. </p>
<sage><input></input></sage>
</statement>
<solution>
<listing>
<caption>
Le code de la solution.
</caption>
<program language="sage">
<input>
def serpech(d):
    p=[0]
    while p[-1]!=d[-1]:
        p.append(tour(d,p[-1]))
    return p
</input>
</program>
</listing>
</solution>
</task>
<task><statement><p>Approximer le nombre de coups nécessaires pour atteindre l'arrivée en simulant <m>1000</m> parties. La commande pour calculer la moyenne d'une liste est <c>numpy.mean</c>.</p>
<sage><input></input></sage>
</statement>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
d=vector([0,4,2,3,4,5,2,7])
M=[]
for i in range(1000):
    M.append(len(serpech(d))-1)
numpy.mean(M)
</input>
<output>
9.63  #Cette valeur sera évidemment différente chaque utilisation
</output>
</program>
</listing>
</solution>
</task>
<task xml:id="exo-serpechsimpleplusde20"><statement><p>Toujours en simulant <m>1000</m> parties, déterminer approximativement la proportion de parties nécessitant plus de <m>20</m> tours. </p>
<sage><input></input></sage>
</statement>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
d=vector([0,4,2,3,4,5,2,7])
M=[]
for i in range(1000):
    M.append(len(serpech(d))-1)
M21=[m for m in M if m>20]
(len(M21)/1000).n()
</input>
<output>
0.086000000000000  #Cette valeur sera évidemment différente chaque utilisation
</output>
</program>
</listing>
</solution>
</task>
<task><statement><p>Créer une fonction <c>transition_serpech</c> qui, pour une liste de déplacements et un entier <m>n</m>, retourne la matrice de transition d'une chaine de Markov du jeu s'il est possible d'avancer de <m>1,2,\ldots , n</m> cases chaque tour.</p>
<sage><input></input></sage>
</statement>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
def transition_serpech(d,n): #Retourne la matrice de transition selon un vecteur de déplacement d et un dé à n faces
    cols=[]
    for case in range(len(d)): #On crée les colonnes de la matrice
        col=vector(QQ,[0 for i in range(len(d))]) #On initialise la colonne au vecteur nul. À noter qu'on spécifie QQ pour que Sage accepte les rationnels
        if case==len(d)-1: #Si on est à l'arrivée
            col[-1]=1
            cols.append(col)
            break
        valide=0 #On compte combien de lancers de dés sont valides, au sens où ils ne dépasse pas l'arrivée
        for poss in range(1,n+1): #On peut avancer de 1,2,...,n
            if case+poss&lt;=len(d)-1:  #Si le déplacement est valide
                valide+=1
        for poss in range(1,valide+1):  #Pour les déplacements valides
            col[d[case+poss]]+=1/valide  #On ajoute 1/valide aux chances de se retrouver à cette position. Important de l'ajouter de de ne pas remplacer, au cas où, lors d'un même tour, on peut atteindre une case à la fois par un lancer de dé et par un serpent ou une échelle.
        cols.append(col)  #On ajoute la colonne à la liste des colonnes
    T=column_matrix(cols) #La matrice de transition
    return T
</input>
</program>
</listing>
</solution>
</task>
<task><statement><p>Utiliser cette fonction pour créer la matrice de transition du jeu simplifié <em>serpents et échelles</em>.</p>
<sage><input></input></sage>
</statement>
<answer>
<p><m>T=\begin{pmatrix}
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
\frac{1}{2} &amp; \frac{1}{2} &amp; 0 &amp; 0 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; 0 &amp; 0 \\
0 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
\frac{1}{2} &amp; 0 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; \frac{1}{2} &amp; \frac{1}{2} &amp; 0 &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; \frac{1}{2} &amp; 1 &amp; 1
\end{pmatrix}
</m></p>
</answer>
</task>
<task><statement><p>Quel est le nombre minimal de tours nécessaire pour terminer une partie? Quelle est la probabilité qu'une partie se termine en aussi peu de tours?</p>
<sage><input></input></sage>
</statement>
<answer><p>Le nombre de tours minimal est <m>3</m> et les chances sont de <m>1/8</m>.</p></answer>
<solution><listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
T=transition_serpech(d,2)
X0=vector([1,0,0,0,0,0,0,0])
X=X0
i=0
while X[-1]==0:
    i+=1
    X=T*X
print("Le nombre de tours minimal est ",i)
print("Les chances sont ",X[-1])
</input>
<ouput>Le nombre de tours minimal est 3 et les chances sont de 1/8.</ouput>
</program>
</listing></solution>
</task>
<task><statement><p>À la partie <xref ref="exo-serpechsimpleplusde20"/>, le nombre de parties n'étant pas terminées après <m>20</m> tours a été estimé. Déterminer la véritable valeur de ce nombre à l'aide de la matrice de transition.</p>
<sage><input></input></sage>
</statement>
<answer><p><m>0.0855073928833008</m></p></answer>
<solution><listing><caption>
Le code de la solution.
</caption>
<program language="sage">
<input>
(1-(T^20*X0)[-1]).n()
</input>
</program>
</listing></solution>
</task>
<task><introduction><p>On regarde maintenant la véritable version du jeu <em>serpents et échelles</em>. L'original se déroule sur un plateau contenant <m>100</m> cases et possédant huit échelles et huit serpents. Plusieurs plateaux existent, selon la compagnie qui publie le jeu. Le dictionnaire python ci-dessous donne le début des serpents et des échelles ainsi que leur fin, pour la version accessible à l'auteur au moment de la rédaction.</p>
<sage><input>
config={1:38, 4:14, 9:31, 16:6, 21:42, 28:84, 36:44,47:26, 49:11, 51:67, 56:53, 62:19, 64:60,71:91, 80:100, 87:24, 93:73, 95:75, 98:78}
</input></sage>
</introduction>
<task><statement><p>Le vecteur de déplacement dans ce jeu est un vecteur à <m>100+1</m> composantes, le départ étant toujours en position <m>0</m> et l'arrivée en position <m>100</m>. Créer une fonction qui prend comme argument la configuration des serpents et des échelles et qui retourne le vecteur de déplacement.</p>
<sage><input></input></sage>
</statement>
<hint><p>Initialiser un vecteur contenant les valeurs de <m>0</m> à <m>100</m> et changer les entrées correspondant aux serpents et aux échelles.</p></hint>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
def deplacement(config):
    d=vector(range(101))
    for i in config.keys():
        d[i]=config[i]
    return d
deplacement(config)
</input>
<output>
(0, 38, 2, 3, 14, 5, 6, 7, 8, 31, 10, 11, 12, 13, 14, 15, 6, 17, 18, 19, 20, 42, 22, 23, 24, 25, 26, 27, 84, 29, 30, 31, 32, 33, 34, 35, 44, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 26, 48, 11, 50, 67, 52, 53, 54, 55, 53, 57, 58, 59, 60, 61, 19, 63, 60, 65, 66, 67, 68, 69, 70, 91, 72, 73, 74, 75, 76, 77, 78, 79, 100, 81, 82, 83, 84, 85, 86, 24, 88, 89, 90, 91, 92, 73, 94, 75, 96, 97, 78, 99, 100)
</output>
</program>
</listing>
</solution>
</task>
<task><statement><p>Modifier la fonction <c>tour</c> de la partie <xref ref="exo-serpechtour"/> afin que les déplacements possibles soient compris entre <m>1</m> et <m>6</m> plutôt qu'entre <m>1</m> et <m>2</m>. Il pourrait aussi être nécessaire de modifier d'autres parties de la fonction selon la manière dont elle a été construte. Utiliser la fonction <c>serpech</c> pour simuler une partie.</p>
<sage><input></input></sage>
</statement>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
def tour(d,p): #fonction qui simule un tour de jeu, selon le vecteur de déplacement d et la position de départ p
    t=choice([1,2,3,4,5,6])
    if p==100:  #On modifie l'arrivée
        return 100
    else:
        return d[min(100,p+t)] #Une manière de s'assurer de ne pas dépasser 100
def serpech(d):
    p=[0]
    while p[-1]!=d[-1]:
        p.append(tour(d,p[-1]))
    return p
def deplacement(config):
    d=vector(range(101))
    for i in config.keys():
        d[i]=config[i]
    return d
d=deplacement(config)
serpech(d)
</input>
</program>
</listing>
</solution>
</task>
<task><statement><p>Approximer le nombre de coups nécessaires pour atteindre l'arrivée en simulant <m>1000</m> parties. La commande pour calculer la moyenne d'une liste est <c>numpy.mean</c>.</p>
<sage><input></input></sage></statement>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
M=[]
for i in range(1000):
    M.append(len(serpech(d))-1)
numpy.mean(M)
</input>
<output>
36.483  #Cette valeur sera évidemment différente chaque utilisation
</output>
</program>
</listing>
</solution>
</task>
<task xml:id="exo-serpechplusde20"><statement><p>Toujours en simulant <m>1000</m> parties, déterminer approximativement la proportion de parties nécessitant plus de <m>20</m> tours. </p>
<sage><input></input></sage>
</statement>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
M=[]
for i in range(1000):
    M.append(len(serpech(d))-1)
M21=[m for m in M if m>20]
(len(M21)/1000).n()
</input>
<output>
0.734000000000000  #Cette valeur sera évidemment différente chaque utilisation
</output>
</program>
</listing>
</solution>
</task>
<task><statement><p>Créer la matrice de transition de cette chaine de Markov.</p></statement></task>
<task><statement><p>Quel est le nombre minimal de tours nécessaire pour terminer une partie? Quelle est la probabilité qu'une partie se termine en aussi peu de tours?</p>
<sage><input></input></sage>
</statement>
<answer><p>Le nombre de tours minimal est <m>3</m> et les chances sont de <m>1/8</m>.</p></answer>
<solution><listing>
<caption>Le code de la solution.</caption>
<program language="sage">
T=transition_serpech(d,2)
X0=vector([1,0,0,0,0,0,0,0])
X=X0
X=X0
i=0
while X[-1]==0:
    i+=1
    X=T*X
print("Le nombre de tours minimal est ",i)
print("Les chances sont ",X[-1])
</program>
</listing></solution></task>
<task><statement><p>À la partie <xref ref="exo-serpechplusde20"/>, le nombre de parties n'étant pas terminées après <m>20</m> tours a été estimé. Déterminer la véritable valeur de ce nombre à l'aide de la matrice de transition.</p>
<sage><input></input></sage>
</statement>
<answer><p><m>0.743056171254892</m></p></answer>
<solution><listing><caption>
Le code de la solution.
</caption>
<program language="sage">
<input>
(1-(T^20*X0)[-1]).n()
</input>
</program>
</listing></solution>
</task>
<task><statement><p>Créer une liste contenant les chances que le jeu soit terminé au tour <m>n</m>, pour <m>n</m> allant de <m>0</m> à <m>200</m>. À l'aide des fonctions <c>zip</c> et <c>point</c>, tracer le graphique des probabilités que le jeu soit terminé en fonction du nombre de tours.</p></statement>
<solution>
<listing>
<caption>Le code de la solution.</caption>
<program language="sage">
<input>
fin=[((T^n*X0)[-1]).n() for n in range(200)]
coordx=list(range(200))
point(list(zip(coordx,fin)))
</input>
</program>
</listing>
</solution>
</task>
</task>
</exercise>
</exercisegroup>
</exercises>
